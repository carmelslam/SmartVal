// üß™ Test script to debug data parsing issues
// This helps identify exactly where the data flow breaks

import { HEBREW_TO_ENGLISH } from './field-mapping-dictionary.js';

// Your actual Make.com data from the examples
const testMakeComData = `◊§◊®◊ò◊ô ◊®◊õ◊ë: 5785269
◊™◊ê◊®◊ô◊ö: 2025-07-20T18:26:27.643+02:00
◊û◊°' ◊®◊õ◊ë: 5785269
◊©◊ù ◊î◊ô◊¶◊®◊ü: ◊ë◊ô◊ï◊ê◊ô◊ß
◊ì◊í◊ù: LUCERNE
◊°◊ï◊í ◊î◊ì◊í◊ù: ◊°◊ì◊ê◊ü
◊°◊ï◊í ◊î◊®◊õ◊ë: ◊§◊®◊ò◊ô
◊®◊û◊™ ◊í◊ô◊û◊ï◊®:CXL
◊û◊°◊§◊® ◊©◊ô◊ú◊ì◊î: 1G4HD57258U196450
◊©◊†◊™ ◊ô◊ô◊¶◊ï◊®: 05/2009
◊©◊ù ◊ë◊¢◊ú ◊î◊®◊õ◊ë: ◊õ◊®◊û◊ú ◊õ◊ô◊ï◊£
◊°◊ï◊í ◊ë◊¢◊ú◊ï◊™: ◊§◊®◊ò◊ô
◊†◊§◊ó ◊û◊†◊ï◊¢: 3791
◊°◊ï◊í ◊ì◊ú◊ß: ◊ë◊†◊ñ◊ô◊ü
◊û◊°◊§◊® ◊ì◊í◊ù ◊î◊®◊õ◊ë:HD572
◊ì◊í◊ù ◊û◊†◊ï◊¢: 428
◊î◊†◊¢◊î: 4X2
◊û◊ï◊°◊ö: UMI ◊ó◊ô◊§◊î
◊ß◊ï◊ì ◊û◊©◊®◊ì ◊î◊™◊ó◊ë◊ï◊®◊î:156-11`;

const testLeviData = `◊§◊®◊ò◊ô ◊®◊õ◊ë 5785269 ◊ú◊î◊¢◊®◊õ◊™ ◊†◊ñ◊ß
-------------------------------------
◊ß◊ï◊ì ◊ì◊í◊ù: 870170
◊©◊ù ◊ì◊í◊ù ◊û◊ú◊ê :◊í'◊ô◊§ ◊®◊ô◊ô◊†◊í'◊ì 150(1332) LATITUDE
◊ê◊ï◊ò◊ï◊û◊ò : ◊õ◊ü
◊û◊ê◊§◊ô◊ô◊†◊ô ◊î◊®◊õ◊ë : 
◊™◊ê◊®◊ô◊ö ◊î◊ï◊¶◊ê◊™ ◊î◊ì◊ï"◊ó : 07/04/2025
◊¢◊ú◊ô◊î ◊ú◊õ◊ë◊ô◊© : 08/2021
◊û◊°◊§◊® ◊ë◊¢◊ú◊ô◊ù : 2
◊ß◊ò◊ô◊í◊ï◊®◊ô◊î : ◊§◊†◊ê◊ô ◊©◊ò◊ó
◊û◊°' ◊ß"◊û : 11900
◊û◊ó◊ô◊® ◊ë◊°◊ô◊° : 85,000
◊û◊ó◊ô◊® ◊°◊ï◊§◊ô ◊ú◊®◊õ◊ë : 92,670

---------  ◊†◊™◊ï◊†◊ô ◊î◊™◊ê◊û◊ï◊™ ◊û◊ó◊ô◊®--------
1. ◊¢◊ú◊ô◊î ◊ú◊õ◊ë◊ô◊© : 
◊¢◊ú◊ô◊î ◊ú◊õ◊ë◊ô◊© % : 0%
◊¢◊®◊ö ◊õ◊°◊§◊ô ◊¢◊ú◊ô◊î ◊ú◊õ◊ë◊ô◊© : 3,500
◊©◊ï◊ï◊ô ◊û◊¶◊ò◊ë◊® ◊¢◊ú◊ô◊î ◊ú◊õ◊ë◊ô◊© : 88,500

2. ◊û◊°' ◊ß"◊û : 
◊û◊°' ◊ß"◊û % : 7.95%
◊¢◊®◊ö ◊õ◊°◊§◊ô ◊û◊°' ◊ß"◊û : 7,036
◊©◊ï◊ï◊ô ◊û◊¶◊ò◊ë◊® ◊û◊°' ◊ß"◊û : 95,536

3. ◊°◊ï◊í ◊ë◊¢◊ú◊ï◊™ : 
◊°◊ï◊í ◊ë◊¢◊ú◊ï◊™ : ◊§◊®◊ò◊ô◊™
◊ë◊¢◊ú◊ï◊™ % : -3%
◊¢◊®◊ö ◊õ◊°◊§◊ô ◊ë◊¢◊ú◊ï◊™ : 2,866
◊©◊ï◊ï◊ô ◊û◊¶◊ò◊ë◊® ◊ë◊¢◊ú◊ï◊™ : 92,670`;

function testHebrewParsing(text, label) {
  console.log(`\nüß™ Testing ${label}:`);
  console.log('üìù Raw text:', text.substring(0, 100) + '...');
  
  const result = {};
  const lines = text.split('\n').filter(line => line.trim());
  
  console.log(`üìã Processing ${lines.length} lines`);
  
  let mappedCount = 0;
  let unmappedCount = 0;
  
  lines.forEach((line, index) => {
    if (!line.trim()) return;
    
    let parts = [];
    if (line.includes(':')) {
      parts = line.split(':');
    } else if (line.includes('Ôºö')) {
      parts = line.split('Ôºö');
    }
    
    if (parts.length >= 2) {
      const hebrewKey = parts[0].trim();
      const value = parts.slice(1).join(':').trim();
      
      if (!value) return;
      
      const englishKey = HEBREW_TO_ENGLISH[hebrewKey];
      if (englishKey) {
        result[englishKey] = value;
        console.log(`  ‚úÖ Line ${index + 1}: "${hebrewKey}" ‚Üí ${englishKey}: "${value}"`);
        mappedCount++;
      } else if (value && value !== '-') {
        result[hebrewKey] = value;
        console.log(`  ‚ùå Line ${index + 1}: "${hebrewKey}": "${value}" (NO MAPPING FOUND)`);
        unmappedCount++;
      }
    }
  });
  
  console.log(`\nüìä Results for ${label}:`);
  console.log(`  ‚úÖ Mapped fields: ${mappedCount}`);
  console.log(`  ‚ùå Unmapped fields: ${unmappedCount}`);
  console.log(`  üìã Final parsed object:`, result);
  
  return result;
}

// Test the parsing
console.log('üß™ TESTING DATA PARSING WITH ACTUAL MAKE.COM DATA');
console.log('=' .repeat(60));

const makeComResult = testHebrewParsing(testMakeComData, 'Make.com Car Data');
const leviResult = testHebrewParsing(testLeviData, 'Levi OCR Data');

console.log('\nüéØ SUMMARY:');
console.log('Make.com parsed fields:', Object.keys(makeComResult));
console.log('Levi parsed fields:', Object.keys(leviResult));

// Test specific critical fields
const criticalFields = ['plate', 'manufacturer', 'model', 'owner', 'year'];
console.log('\nüîç Critical field check:');
criticalFields.forEach(field => {
  const makeValue = makeComResult[field];
  const status = makeValue ? '‚úÖ' : '‚ùå';
  console.log(`  ${status} ${field}: ${makeValue || 'MISSING'}`);
});

export { testHebrewParsing };